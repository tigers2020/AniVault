---
description: UTF-8 encoding patterns and best practices guide
globs: src/core/*encoding*.py, src/utils/*encoding*.py, **/*utf8*.py, main.py
alwaysApply: false
---

# UTF-8 Encoding Patterns Guide

## Core Principles

- **Global UTF-8 Enforcement**: All file I/O MUST use UTF-8 encoding
- **Environment Variables**: PYTHONIOENCODING=UTF-8 built-in
- **Source Code**: All Python files MUST be saved in UTF-8
- **Resource Files**: All resources (JSON, config files) MUST be UTF-8
- **Log Files**: All log files MUST use UTF-8 encoding
- **API Communication**: TMDB API requests/responses MUST be UTF-8

## Environment Setup

### **Global UTF-8 Environment Configuration**
```python
# ✅ DO: AniVault UTF-8 환경 설정
import os
import sys
import locale
from pathlib import Path

def setup_utf8_environment() -> None:
    """전역 UTF-8 환경 설정."""

    # 환경변수 설정
    os.environ['PYTHONIOENCODING'] = 'utf-8'
    os.environ['LC_ALL'] = 'ko_KR.UTF-8'
    os.environ['LANG'] = 'ko_KR.UTF-8'

    # Windows 특화 설정
    if sys.platform == 'win32':
        os.environ['PYTHONLEGACYWINDOWSSTDIO'] = '1'

        # Windows 콘솔 UTF-8 설정
        try:
            import codecs
            sys.stdout = codecs.getwriter('utf-8')(sys.stdout.detach())
            sys.stderr = codecs.getwriter('utf-8')(sys.stderr.detach())
        except Exception as e:
            logger.warning(f"Failed to set UTF-8 console encoding: {e}")

    # 표준 입출력 재설정
    if hasattr(sys.stdout, 'reconfigure'):
        try:
            sys.stdout.reconfigure(encoding='utf-8')
            sys.stderr.reconfigure(encoding='utf-8')
        except Exception as e:
            logger.warning(f"Failed to reconfigure stdio: {e}")

    # 로케일 설정
    try:
        if sys.platform == 'win32':
            # Windows에서는 시스템 로케일 사용
            locale.setlocale(locale.LC_ALL, '')
        else:
            # Unix 계열에서는 UTF-8 로케일 설정
            locale.setlocale(locale.LC_ALL, 'ko_KR.UTF-8')
    except locale.Error as e:
        logger.warning(f"Failed to set locale: {e}")

class UTF8Environment:
    """UTF-8 환경 관리자."""

    def __init__(self):
        self._original_stdout = None
        self._original_stderr = None
        self._setup_complete = False

    def initialize(self) -> None:
        """UTF-8 환경 초기화."""
        if self._setup_complete:
            return

        setup_utf8_environment()
        self._setup_complete = True
        logger.info("UTF-8 environment initialized")

    def cleanup(self) -> None:
        """환경 정리."""
        if self._original_stdout:
            sys.stdout = self._original_stdout
        if self._original_stderr:
            sys.stderr = self._original_stderr
```

## 파일 I/O 패턴

### **안전한 파일 읽기/쓰기**
```python
# ✅ DO: UTF-8 강제 파일 I/O
from pathlib import Path
from typing import Any, Union
import json

class UTF8FileHandler:
    """UTF-8 전제 파일 핸들러."""

    @staticmethod
    def read_text(file_path: Union[str, Path], encoding: str = 'utf-8') -> str:
        """UTF-8로 텍스트 파일 읽기."""
        file_path = Path(file_path)

        try:
            with open(file_path, 'r', encoding=encoding, errors='replace') as f:
                return f.read()
        except UnicodeDecodeError as e:
            logger.error(f"UTF-8 decode error for {file_path}: {e}")
            raise
        except Exception as e:
            logger.error(f"File read error for {file_path}: {e}")
            raise

    @staticmethod
    def write_text(file_path: Union[str, Path], content: str, encoding: str = 'utf-8') -> None:
        """UTF-8로 텍스트 파일 쓰기."""
        file_path = Path(file_path)

        try:
            # 디렉토리 생성
            file_path.parent.mkdir(parents=True, exist_ok=True)

            with open(file_path, 'w', encoding=encoding, errors='replace') as f:
                f.write(content)
        except UnicodeEncodeError as e:
            logger.error(f"UTF-8 encode error for {file_path}: {e}")
            raise
        except Exception as e:
            logger.error(f"File write error for {file_path}: {e}")
            raise

    @staticmethod
    def read_json(file_path: Union[str, Path]) -> Any:
        """UTF-8로 JSON 파일 읽기."""
        content = UTF8FileHandler.read_text(file_path)

        try:
            return json.loads(content)
        except json.JSONDecodeError as e:
            logger.error(f"JSON decode error for {file_path}: {e}")
            raise

    @staticmethod
    def write_json(file_path: Union[str, Path], data: Any, indent: int = 2) -> None:
        """UTF-8로 JSON 파일 쓰기."""
        try:
            json_str = json.dumps(data, ensure_ascii=False, indent=indent, separators=(',', ': '))
            UTF8FileHandler.write_text(file_path, json_str)
        except (TypeError, ValueError) as e:
            logger.error(f"JSON encode error for {file_path}: {e}")
            raise
```

## API 통신 패턴

### **TMDB API UTF-8 통신**
```python
# ✅ DO: TMDB API UTF-8 통신
import requests
from typing import Dict, Any, Optional

class UTF8APIClient:
    """UTF-8 전제 API 클라이언트."""

    def __init__(self, base_url: str, api_key: str):
        self.base_url = base_url
        self.session = requests.Session()
        self.session.headers.update({
            'Authorization': f'Bearer {api_key}',
            'Content-Type': 'application/json;charset=utf-8',
            'Accept': 'application/json;charset=utf-8'
        })

    def get(self, endpoint: str, params: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
        """UTF-8 GET 요청."""
        url = f"{self.base_url}{endpoint}"

        try:
            response = self.session.get(url, params=params, timeout=10)
            response.raise_for_status()

            # UTF-8 응답 처리
            response.encoding = 'utf-8'
            return response.json()

        except requests.exceptions.RequestException as e:
            logger.error(f"API request error: {e}")
            raise
        except UnicodeDecodeError as e:
            logger.error(f"UTF-8 decode error in API response: {e}")
            raise

    def post(self, endpoint: str, data: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
        """UTF-8 POST 요청."""
        url = f"{self.base_url}{endpoint}"

        try:
            # JSON 데이터를 UTF-8로 인코딩
            json_data = json.dumps(data, ensure_ascii=False) if data else None

            response = self.session.post(
                url,
                data=json_data,
                headers={'Content-Type': 'application/json;charset=utf-8'},
                timeout=10
            )
            response.raise_for_status()

            response.encoding = 'utf-8'
            return response.json()

        except requests.exceptions.RequestException as e:
            logger.error(f"API request error: {e}")
            raise
        except UnicodeDecodeError as e:
            logger.error(f"UTF-8 decode error in API response: {e}")
            raise
```

## 로깅 패턴

### **UTF-8 로깅 설정**
```python
# ✅ DO: UTF-8 로깅 설정
import logging
import logging.handlers
from pathlib import Path

def setup_utf8_logging(log_dir: Path = Path("logs")) -> None:
    """UTF-8 로깅 설정."""

    # 로그 디렉토리 생성
    log_dir.mkdir(exist_ok=True)

    # 루트 로거 설정
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.INFO)

    # 기존 핸들러 제거
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)

    # 콘솔 핸들러 (UTF-8)
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    console_handler.setFormatter(console_formatter)
    root_logger.addHandler(console_handler)

    # 파일 핸들러들 (UTF-8 강제)
    handlers = [
        ("app_info.log", logging.INFO),
        ("app_warn.log", logging.WARNING),
        ("app_error.log", logging.ERROR),
    ]

    for filename, level in handlers:
        handler = logging.handlers.TimedRotatingFileHandler(
            log_dir / filename,
            when='midnight',
            interval=1,
            backupCount=7,
            encoding='utf-8',  # UTF-8 강제
            utc=True
        )
        handler.setLevel(level)

        # UTF-8 포맷터
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        handler.setFormatter(formatter)
        root_logger.addHandler(handler)

class UTF8Logger:
    """UTF-8 전제 로거."""

    def __init__(self, name: str):
        self.logger = logging.getLogger(name)

    def info(self, message: str, *args, **kwargs) -> None:
        """INFO 레벨 로깅."""
        self.logger.info(message, *args, **kwargs)

    def warning(self, message: str, *args, **kwargs) -> None:
        """WARNING 레벨 로깅."""
        self.logger.warning(message, *args, **kwargs)

    def error(self, message: str, *args, **kwargs) -> None:
        """ERROR 레벨 로깅."""
        self.logger.error(message, *args, **kwargs)

    def debug(self, message: str, *args, **kwargs) -> None:
        """DEBUG 레벨 로깅."""
        self.logger.debug(message, *args, **kwargs)
```

## 설정 파일 패턴

### **UTF-8 설정 파일 관리**
```python
# ✅ DO: UTF-8 설정 파일 관리
from dataclasses import dataclass, asdict
from typing import Dict, Any, Optional
import json

@dataclass
class AniVaultConfig:
    """AniVault 설정 클래스."""
    tmdb_api_key: str
    cache_dir: str = "cache"
    log_dir: str = "logs"
    log_level: str = "INFO"
    max_workers: int = 4
    language: str = "ko-KR"
    auto_update: bool = True

    def to_dict(self) -> Dict[str, Any]:
        """딕셔너리로 변환."""
        return asdict(self)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'AniVaultConfig':
        """딕셔너리에서 생성."""
        return cls(**data)

class UTF8ConfigManager:
    """UTF-8 설정 관리자."""

    def __init__(self, config_path: Path = Path("data/config/settings.json")):
        self.config_path = config_path
        self.config_path.parent.mkdir(parents=True, exist_ok=True)

    def load(self) -> AniVaultConfig:
        """설정 로드."""
        if not self.config_path.exists():
            # 기본 설정 생성
            default_config = AniVaultConfig(tmdb_api_key="")
            self.save(default_config)
            return default_config

        try:
            data = UTF8FileHandler.read_json(self.config_path)
            return AniVaultConfig.from_dict(data)
        except Exception as e:
            logger.error(f"Config load error: {e}")
            # 기본 설정 반환
            return AniVaultConfig(tmdb_api_key="")

    def save(self, config: AniVaultConfig) -> None:
        """설정 저장."""
        try:
            UTF8FileHandler.write_json(self.config_path, config.to_dict())
        except Exception as e:
            logger.error(f"Config save error: {e}")
            raise
```

## 안티패턴 및 금지사항

### **❌ DON'T: 잘못된 인코딩 패턴**
```python
# ❌ DON'T: 인코딩 미지정
def bad_file_read():
    with open("file.txt", "r") as f:  # ❌ 인코딩 미지정
        content = f.read()

# ❌ DON'T: 시스템 기본 인코딩 사용
def bad_system_encoding():
    import locale
    encoding = locale.getpreferredencoding()  # ❌ 시스템 기본 인코딩
    with open("file.txt", "r", encoding=encoding) as f:
        content = f.read()

# ❌ DON'T: ASCII 강제
def bad_ascii_encoding():
    with open("file.txt", "w", encoding="ascii") as f:  # ❌ ASCII 인코딩
        f.write("한글 텍스트")  # 에러 발생

# ❌ DON'T: 에러 무시
def bad_error_ignore():
    with open("file.txt", "r", encoding="utf-8", errors="ignore") as f:  # ❌ 에러 무시
        content = f.read()
```

### **✅ DO: 올바른 UTF-8 패턴**
```python
# ✅ DO: UTF-8 강제
def good_file_read():
    with open("file.txt", "r", encoding="utf-8") as f:  # ✅ UTF-8 강제
        content = f.read()

# ✅ DO: UTF-8 환경 설정
def good_environment_setup():
    os.environ['PYTHONIOENCODING'] = 'utf-8'  # ✅ 환경변수 설정
    with open("file.txt", "r") as f:  # ✅ 기본 UTF-8 사용
        content = f.read()

# ✅ DO: 에러 처리
def good_error_handling():
    try:
        with open("file.txt", "r", encoding="utf-8") as f:
            content = f.read()
    except UnicodeDecodeError as e:
        logger.error(f"UTF-8 decode error: {e}")  # ✅ 에러 로깅
        raise

# ✅ DO: 안전한 파일 처리
def good_safe_file_handling():
    UTF8FileHandler.write_text("file.txt", "한글 텍스트")  # ✅ 안전한 파일 처리
    content = UTF8FileHandler.read_text("file.txt")
```

## Related Rules

- **Logging**: [logging.mdc](mdc:.cursor/rules/logging.mdc)
- **File Processing**: [file_processing.mdc](mdc:.cursor/rules/file_processing.mdc)
- **TMDB API**: [tmdb_api.mdc](mdc:.cursor/rules/tmdb_api.mdc)
- **Packaging**: [packaging.mdc](mdc:.cursor/rules/packaging.mdc)

---

# [Korean Notes]
- UTF-8 인코딩은 AniVault 프로젝트의 핵심 요구사항입니다.
- 모든 파일 I/O, 로깅, API 통신에서 UTF-8을 강제로 사용해야 합니다.
- Windows 환경에서도 UTF-8 환경 설정이 필요합니다.
- "인코딩=Encoding", "문자셋=Character Set", "로케일=Locale"
