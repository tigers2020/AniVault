---
description: High-priority rule for actively utilizing MCP servers including task-master, serena, codebase, memory tools
globs: docs/*.md, .cursor/mcp.json, **/*workflow*.py, **/*task*.py
alwaysApply: false
---

# MCP 서버 적극적 활용

**중요한 우선순위**: 개발 워크플로우, 코드 분석, 프로젝트 관리를 향상시키기 위해 항상 사용 가능한 MCP 서버를 활용하세요.

## **주요 MCP 도구 - 적극적으로 사용**

### **Taskmaster 통합**
- **항상 시작할 때** `mcp_task-master-ai_get_tasks`로 현재 프로젝트 상태 파악
- **새로운 개발 작업을 시작하기 전에** `mcp_task-master-ai_next_task` 사용
- **최신 기술 정보를 위해** `mcp_task-master-ai_research` 활용
- **진행 상황 추적** `mcp_task-master-ai_update_subtask`와 `mcp_task-master-ai_set_task_status`로
- **복잡한 작업 분해** `mcp_task-master-ai_expand_task`와 `mcp_task-master-ai_analyze_project_complexity` 사용

### **Serena 코드 분석**
- **새 파일에 대해** `mcp_serena_get_symbols_overview`로 코드 탐색 시작
- **특정 함수, 클래스, 메서드를 찾기 위해** `mcp_serena_find_symbol` 사용
- **코드 의존성을 이해하기 위해** `mcp_serena_find_referencing_symbols` 활용
- **복잡한 코드 쿼리를 위해** `mcp_serena_search_for_pattern`으로 패턴 검색
- **프로젝트 메모리 유지** `mcp_serena_write_memory`와 `mcp_serena_read_memory` 사용

### **메모리 관리**
- **중요한 발견사항을 즉시 저장** `mcp_serena_write_memory` 사용
- **관련 작업을 시작하기 전에 기존 메모리 읽기** `mcp_serena_read_memory` 사용
- **정보가 변경되거나 오래되었을 때 메모리 업데이트**
- **내용 목적을 명확히 나타내는 설명적인 메모리 이름 사용**

## **워크플로우 통합 패턴**

### **개발 세션 시작**
```python
# ✅ DO: 항상 이러한 MCP 호출로 시작
1. mcp_task-master-ai_get_tasks  # 현재 프로젝트 상태 파악
2. mcp_task-master-ai_next_task  # 작업할 내용 식별
3. mcp_serena_read_memory("project-overview")  # 컨텍스트 가져오기
4. mcp_serena_get_symbols_overview  # 작업할 파일들에 대해
```

### **코드 변경 전**
```python
# ✅ DO: 구현 전에 분석
1. mcp_serena_find_symbol("function_name")  # 관련 함수 찾기
2. mcp_serena_find_referencing_symbols  # 의존성 이해
3. mcp_task-master-ai_research  # 최신 모범 사례 가져오기
4. mcp_serena_write_memory  # 발견사항 문서화
```

### **구현 중**
```python
# ✅ DO: 진행 상황을 적극적으로 추적
1. mcp_task-master-ai_update_subtask  # 구현 세부사항 로깅
2. mcp_serena_search_for_pattern  # 코드베이스에서 유사한 패턴 찾기
3. mcp_task-master-ai_set_task_status  # 완료 상태 업데이트
```

## **특정 사용 사례**

### **코드 분석 및 이해**
- **새 코드베이스 탐색**: `mcp_serena_get_symbols_overview` → `mcp_serena_find_symbol` → `mcp_serena_find_referencing_symbols` 사용
- **패턴 발견**: 정규식 패턴과 함께 `mcp_serena_search_for_pattern` 사용
- **아키텍처 이해**: serena 도구와 `mcp_task-master-ai_research` 결합

### **프로젝트 관리**
- **작업 분해**: `mcp_task-master-ai_analyze_project_complexity` → `mcp_task-master-ai_expand_task` 사용
- **진행 상황 추적**: 정기적인 `mcp_task-master-ai_update_subtask` 호출
- **지식 보존**: 중요한 결정사항에 `mcp_serena_write_memory` 사용

### **연구 및 학습**
- **기술 연구**: 프로젝트 컨텍스트와 함께 `mcp_task-master-ai_research` 사용
- **모범 사례**: 기존 코드베이스 분석과 연구 결합
- **문서화**: 향후 참조를 위해 발견사항을 메모리에 저장

## **피해야 할 안티패턴**

```python
# ❌ DON'T: MCP 컨텍스트 없이 작업
# 작업 상태 확인 없이 개발 시작
# 기존 패턴을 이해하지 않고 변경하기
# 중요한 발견사항을 문서화하지 않기

# ❌ DON'T: 사용 가능한 도구를 충분히 활용하지 않기
# task-master 워크플로우 무시
# 코드 분석에 serena 사용하지 않기
# 프로젝트 메모리 유지 실패
```

## **메모리 카테고리**

### **프로젝트 구조**
- `project-architecture`: 전체 시스템 설계 및 패턴
- `codebase-patterns`: 일반적인 코딩 패턴 및 규칙
- `integration-points`: 주요 통합 및 API 세부사항

### **개발 결정사항**
- `technical-decisions`: 아키텍처 및 기술 선택
- `implementation-notes`: 특정 구현 접근법
- `troubleshooting-guide`: 일반적인 문제 및 해결책

### **워크플로우 최적화**
- `development-workflow`: 최적화된 개발 프로세스
- `testing-strategies`: 테스팅 접근법 및 패턴
- `deployment-notes`: 배포 및 구성 세부사항

## **기존 룰과의 통합**

- **작업 관리**를 위해 [taskmaster.mdc](mdc:.cursor/rules/taskmaster/taskmaster.mdc) 따르기
- **개발 프로세스**를 위해 [dev_workflow.mdc](mdc:.cursor/rules/taskmaster/dev_workflow.mdc) 사용
- **지속적인 개선**을 위해 [self_improve.mdc](mdc:.cursor/rules/self_improve.mdc) 유지
- **비동기 처리**: [async_patterns.mdc](mdc:.cursor/rules/async_patterns.mdc)
- **에러 처리**: [error_handling.mdc](mdc:.cursor/rules/error_handling.mdc)
- **로깅**: [logging.mdc](mdc:.cursor/rules/logging.mdc)
- **테스트**: [testing.mdc](mdc:.cursor/rules/testing.mdc)
- **성능**: [performance.mdc](mdc:.cursor/rules/performance.mdc)

## **성공 지표**

- **높은 MCP 활용도**: 모든 사용 가능한 MCP 도구의 정기적 사용
- **정보에 기반한 결정**: 연구 기반 기술 선택
- **효율적인 워크플로우**: Task-master 가이드 개발
- **지식 보존**: 포괄적인 메모리 관리
- **코드 품질**: Serena 지원 코드 분석 및 개선

**기억하세요**: MCP 서버는 개발 능력을 향상시키기 위해 설계된 강력한 도구입니다. 반응적으로가 아닌 적극적으로 사용하세요.
