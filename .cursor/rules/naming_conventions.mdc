---
description: Naming conventions and prohibited terms for consistent codebase terminology
globs: src/core/*.py, src/services/*.py, src/utils/*.py
alwaysApply: false
---

## Policy
- Default output language: **English**.
- If the user speaks Korean, respond in Korean, **but** keep code identifiers/comments/logs in English unless explicitly requested.

- **Prohibited Terms:**
  - **MUST NOT use "unified" in method names, variables, or comments**
    - ❌ DON'T: `search_unified()`, `unified_strategies`, `unified_search`
    - ✅ DO: `search()`, `search_strategies`, `search_method`
    - Reason: "unified" is redundant and makes code unnecessarily verbose

- **Method Naming Guidelines:**
  - **Use clear and descriptive names without redundant prefixes**
    - ✅ DO: `search()`, `get_metadata()`, `find_best_match()`
    - ❌ DON'T: `search_unified()`, `get_unified_metadata()`, `find_unified_best_match()`

  - **복합 형용사보다는 간단하고 직접적인 이름 선호**
    - ✅ DO: `recursive_search()`, `progressive_search()`
    - ❌ DON'T: `unified_recursive_search()`, `comprehensive_progressive_search()`

- **변수 명명:**
  - **중복된 설명 단어 피하기**
    - ✅ DO: `search_strategies`, `search_result`, `search_type`
    - ❌ DON'T: `unified_search_strategies`, `comprehensive_search_result`, `unified_search_type`

- **주석 및 문서화:**
  - **주석을 간결하게 유지하고 중복된 용어 피하기**
    - ✅ DO: "재귀적 전략으로 TV와 Movie 검색을 모두 시도하는 검색"
    - ❌ DON'T: "재귀적 전략으로 TV와 Movie 검색을 모두 시도하는 통합 검색"

- **코드 리뷰 체크리스트:**
  - 새 코드에서 "unified" 사용 여부 확인
  - 메서드 이름이 명확하고 간결한지 확인
  - 변수 이름에 중복된 설명 단어가 포함되지 않았는지 확인
  - 불필요하게 장황한 용어에 대한 주석 검토

- **코드베이스 예시:**
  ```python
  # ✅ GOOD: 명확하고 간결함
  def search(self, query: str) -> Optional[SearchResult]:
      """재귀적 전략으로 TV와 Movie 검색을 모두 시도하는 검색."""
      search_strategies = [SearchStrategy.ORIGINAL, SearchStrategy.NORMALIZED]
      search_result = self.recursive_search(query, strategies=search_strategies)
      return search_result

  # ❌ BAD: 중복적이고 장황함
  def search_unified(self, query: str) -> Optional[SearchResult]:
      """재귀적 전략으로 TV와 Movie 검색을 모두 시도하는 통합 검색."""
      unified_search_strategies = [SearchStrategy.ORIGINAL, SearchStrategy.NORMALIZED]
      unified_search_result = self.recursive_search(query, strategies=unified_search_strategies)
      return unified_search_result
  ```
