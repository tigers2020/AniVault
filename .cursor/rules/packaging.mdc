---
description: Single exe packaging and deployment patterns guide
globs: tools/bundle_poc/*.py, build_scripts/*.py, **/*bundle*.py, **/*packaging*.py
alwaysApply: false
priority: 8
---

# 단일 exe 패키징 패턴 가이드

## 핵심 원칙

- **단일 exe 목표**: 설치/런타임에 외부 의존 설치 없음
- **Nuitka 우선**: 성능/리빙러닝타임 강점으로 Nuitka onefile 시도
- **PyInstaller 백업**: Nuitka 실패 시 PyInstaller --onefile 사용
- **UTF-8 환경**: 패키징된 exe에서도 UTF-8 인코딩 보장
- **리소스 포함**: Qt 플러그인, 아이콘, 설정 파일 등 모든 리소스 포함

## 패키징 도구 선택

### **Nuitka vs PyInstaller 비교**
```python
# ✅ DO: 패키징 도구 선택 기준
from enum import Enum
from dataclasses import dataclass
from typing import List, Dict, Any

class PackagingTool(Enum):
    """패키징 도구."""
    NUITKA = "nuitka"
    PYINSTALLER = "pyinstaller"

@dataclass
class PackagingConfig:
    """패키징 설정."""
    tool: PackagingTool
    entry_point: str = "main.py"
    output_name: str = "AniVault"
    icon_path: str = "assets/icon.ico"
    include_data: List[tuple] = None
    hidden_imports: List[str] = None
    exclude_modules: List[str] = None
    optimize: bool = True
    debug: bool = False

class AniVaultPackager:
    """AniVault 패키저 - Nuitka 우선, PyInstaller 백업."""

    def __init__(self, config: PackagingConfig):
        self.config = config
        self.logger = logging.getLogger("packaging")

    def build(self) -> bool:
        """빌드 실행 - Nuitka 우선 시도."""
        try:
            if self.config.tool == PackagingTool.NUITKA:
                return self._build_with_nuitka()
            else:
                return self._build_with_pyinstaller()
        except Exception as e:
            self.logger.error(f"Build failed with {self.config.tool.value}: {e}")

            # Nuitka 실패 시 PyInstaller로 전환
            if self.config.tool == PackagingTool.NUITKA:
                self.logger.info("Falling back to PyInstaller")
                self.config.tool = PackagingTool.PYINSTALLER
                return self._build_with_pyinstaller()

            return False

    def _build_with_nuitka(self) -> bool:
        """Nuitka로 빌드."""
        self.logger.info("Building with Nuitka...")

        cmd = [
            "python", "-m", "nuitka",
            "--onefile",
            "--output-filename", f"{self.config.output_name}.exe",
            "--output-dir", "dist",
            "--enable-plugin", "pyqt5",
            "--windows-icon-from-ico", self.config.icon_path,
            "--assume-yes-for-downloads",
        ]

        # 최적화 옵션
        if self.config.optimize:
            cmd.extend([
                "--optimization-level", "2",
                "--remove-output",
            ])

        # 디버그 옵션
        if self.config.debug:
            cmd.extend([
                "--debug",
                "--verbose",
            ])

        # 숨겨진 임포트
        if self.config.hidden_imports:
            for module in self.config.hidden_imports:
                cmd.extend(["--include-module", module])

        # 데이터 파일 포함
        if self.config.include_data:
            for src, dst in self.config.include_data:
                cmd.extend(["--include-data-files", f"{src}={dst}"])

        cmd.append(self.config.entry_point)

        return self._run_command(cmd)

    def _build_with_pyinstaller(self) -> bool:
        """PyInstaller로 빌드."""
        self.logger.info("Building with PyInstaller...")

        cmd = [
            "pyinstaller",
            "--onefile",
            "--name", self.config.output_name,
            "--distpath", "dist",
            "--workpath", "build",
            "--specpath", ".",
            "--add-data", f"{self.config.icon_path};.",
        ]

        # PyQt5 플러그인 포함
        cmd.extend([
            "--hidden-import", "PyQt5.QtCore",
            "--hidden-import", "PyQt5.QtGui",
            "--hidden-import", "PyQt5.QtWidgets",
            "--collect-all", "PyQt5",
        ])

        # 숨겨진 임포트
        if self.config.hidden_imports:
            for module in self.config.hidden_imports:
                cmd.extend(["--hidden-import", module])

        # 제외 모듈
        if self.config.exclude_modules:
            for module in self.config.exclude_modules:
                cmd.extend(["--exclude-module", module])

        # 최적화 옵션
        if self.config.optimize:
            cmd.extend([
                "--optimize", "2",
                "--strip",
            ])

        # 아이콘 설정
        if self.config.icon_path:
            cmd.extend(["--icon", self.config.icon_path])

        cmd.append(self.config.entry_point)

        return self._run_command(cmd)
```

## 리소스 관리

### **리소스 포함 전략**
```python
# ✅ DO: AniVault 리소스 포함 설정
from pathlib import Path
from typing import List, Tuple

class AniVaultResourceManager:
    """AniVault 리소스 관리자."""

    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.resource_paths = []

    def get_include_data(self) -> List[Tuple[str, str]]:
        """포함할 데이터 파일 목록."""
        include_data = []

        # 아이콘 및 이미지
        icon_dir = self.project_root / "assets" / "icons"
        if icon_dir.exists():
            include_data.append((str(icon_dir / "*.ico"), "assets/icons"))
            include_data.append((str(icon_dir / "*.png"), "assets/icons"))

        # 설정 파일
        config_dir = self.project_root / "data" / "config"
        if config_dir.exists():
            include_data.append((str(config_dir / "*.json"), "data/config"))
            include_data.append((str(config_dir / "*.yaml"), "data/config"))

        # 테마 파일
        themes_dir = self.project_root / "src" / "themes"
        if themes_dir.exists():
            include_data.append((str(themes_dir / "*.qss"), "src/themes"))

        # 로케일 파일
        locale_dir = self.project_root / "src" / "locales"
        if locale_dir.exists():
            include_data.append((str(locale_dir / "*.json"), "src/locales"))

        return include_data

    def get_hidden_imports(self) -> List[str]:
        """숨겨진 임포트 목록."""
        return [
            # PyQt5 관련
            "PyQt5.QtCore",
            "PyQt5.QtGui",
            "PyQt5.QtWidgets",
            "PyQt5.sip",

            # 애니메이션 파싱
            "anitopy",
            "rapidfuzz",

            # TMDB API
            "tmdbsimple",
            "requests",
            "requests.adapters",
            "requests.auth",

            # 데이터베이스
            "sqlalchemy",
            "sqlalchemy.orm",
            "sqlalchemy.engine",

            # 유틸리티
            "pathlib",
            "concurrent.futures",
            "threading",
            "queue",
            "json",
            "logging.handlers",

            # Windows 특화
            "win32api",
            "win32con",
            "win32gui",
        ]

    def get_exclude_modules(self) -> List[str]:
        """제외할 모듈 목록."""
        return [
            # 개발 도구
            "pytest",
            "black",
            "ruff",
            "mypy",
            "pylint",

            # 불필요한 라이브러리
            "tkinter",
            "matplotlib",
            "numpy",
            "pandas",
            "scipy",

            # 테스트 관련
            "test",
            "tests",
            "unittest",
        ]
```

## UTF-8 환경 설정

### **패키징된 exe에서 UTF-8 보장**
```python
# ✅ DO: 패키징된 exe UTF-8 환경 설정
import os
import sys
from pathlib import Path

def setup_utf8_environment():
    """패키징된 exe에서 UTF-8 환경 설정."""

    # 환경변수 설정
    os.environ['PYTHONIOENCODING'] = 'utf-8'
    os.environ['LC_ALL'] = 'ko_KR.UTF-8'
    os.environ['LANG'] = 'ko_KR.UTF-8'

    # 표준 입출력 인코딩 설정
    if hasattr(sys.stdout, 'reconfigure'):
        sys.stdout.reconfigure(encoding='utf-8')
        sys.stderr.reconfigure(encoding='utf-8')

    # 로케일 설정 (Windows)
    if sys.platform == 'win32':
        try:
            import locale
            locale.setlocale(locale.LC_ALL, 'ko_KR.UTF-8')
        except locale.Error:
            # Windows에서 UTF-8 로케일이 없는 경우
            pass

class AniVaultMain:
    """AniVault 메인 클래스 - UTF-8 환경 설정 포함."""

    def __init__(self):
        self.setup_environment()

    def setup_environment(self):
        """환경 설정."""
        # UTF-8 환경 설정
        setup_utf8_environment()

        # 로그 디렉토리 생성
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)

        # 캐시 디렉토리 생성
        cache_dir = Path("cache")
        cache_dir.mkdir(exist_ok=True)

    def run(self):
        """메인 실행."""
        try:
            from src.main import main as app_main
            return app_main()
        except Exception as e:
            logger.error(f"Application error: {e}")
            return 1

if __name__ == "__main__":
    app = AniVaultMain()
    sys.exit(app.run())
```

## 빌드 스크립트

### **자동화된 빌드 스크립트**
```python
# ✅ DO: AniVault 빌드 스크립트
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""AniVault 빌드 스크립트."""

import subprocess
import sys
import shutil
from pathlib import Path
from typing import List, Optional

class AniVaultBuilder:
    """AniVault 빌드 관리자."""

    def __init__(self):
        self.project_root = Path(__file__).parent
        self.dist_dir = self.project_root / "dist"
        self.build_dir = self.project_root / "build"
        self.logger = logging.getLogger("builder")

    def clean(self) -> None:
        """빌드 디렉토리 정리."""
        if self.dist_dir.exists():
            shutil.rmtree(self.dist_dir)

        if self.build_dir.exists():
            shutil.rmtree(self.build_dir)

        # PyInstaller 생성 파일 정리
        for spec_file in self.project_root.glob("*.spec"):
            spec_file.unlink()

    def install_dependencies(self) -> bool:
        """빌드 의존성 설치."""
        dependencies = [
            "nuitka>=1.8.0",
            "pyinstaller>=6.0.0",
            "wheel",
        ]

        for dep in dependencies:
            if not self._install_package(dep):
                return False

        return True

    def _install_package(self, package: str) -> bool:
        """패키지 설치."""
        try:
            subprocess.run([
                sys.executable, "-m", "pip", "install", package
            ], check=True, capture_output=True)
            return True
        except subprocess.CalledProcessError as e:
            self.logger.error(f"Failed to install {package}: {e}")
            return False

    def build_release(self) -> bool:
        """릴리스 빌드."""
        self.logger.info("Starting release build...")

        # 1. 정리
        self.clean()

        # 2. 의존성 설치
        if not self.install_dependencies():
            return False

        # 3. 리소스 관리자 생성
        resource_manager = AniVaultResourceManager(self.project_root)

        # 4. Nuitka 설정
        nuitka_config = PackagingConfig(
            tool=PackagingTool.NUITKA,
            entry_point="main.py",
            output_name="AniVault",
            icon_path="assets/icons/anivault.ico",
            include_data=resource_manager.get_include_data(),
            hidden_imports=resource_manager.get_hidden_imports(),
            exclude_modules=resource_manager.get_exclude_modules(),
            optimize=True,
            debug=False
        )

        # 5. 빌드 실행
        packager = AniVaultPackager(nuitka_config)
        success = packager.build()

        if success:
            self.logger.info("Build completed successfully!")
            self._verify_build()
        else:
            self.logger.error("Build failed!")

        return success

    def _verify_build(self) -> None:
        """빌드 결과 검증."""
        exe_path = self.dist_dir / "AniVault.exe"

        if not exe_path.exists():
            self.logger.error("Executable not found!")
            return

        # 파일 크기 확인
        size_mb = exe_path.stat().st_size / (1024 * 1024)
        self.logger.info(f"Executable size: {size_mb:.1f} MB")

        if size_mb > 200:
            self.logger.warning("Executable is larger than expected (>200MB)")

def main():
    """메인 함수."""
    builder = AniVaultBuilder()

    if len(sys.argv) > 1 and sys.argv[1] == "clean":
        builder.clean()
        return

    success = builder.build_release()
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
```

## 안티패턴 및 금지사항

### **❌ DON'T: 잘못된 패키징 패턴**
```python
# ❌ DON'T: 리소스 미포함
def bad_packaging():
    # ❌ 아이콘, 설정 파일 등 리소스 미포함
    pyinstaller --onefile main.py

# ❌ DON'T: UTF-8 환경 미설정
def bad_utf8_handling():
    # ❌ 패키징된 exe에서 UTF-8 환경 미설정
    with open("file.txt", "r") as f:  # 인코딩 미지정
        content = f.read()

# ❌ DON'T: 의존성 누락
def bad_dependencies():
    # ❌ 숨겨진 임포트 미지정으로 런타임 에러
    pyinstaller --onefile main.py
```

### **✅ DO: 올바른 패키징 패턴**
```python
# ✅ DO: 완전한 리소스 포함
def good_packaging():
    pyinstaller --onefile \
        --add-data "assets/icons;assets/icons" \
        --add-data "data/config;data/config" \
        --hidden-import PyQt5.QtCore \
        --icon assets/icons/anivault.ico \
        main.py

# ✅ DO: UTF-8 환경 보장
def good_utf8_handling():
    os.environ['PYTHONIOENCODING'] = 'utf-8'
    with open("file.txt", "r", encoding="utf-8") as f:
        content = f.read()

# ✅ DO: 모든 의존성 포함
def good_dependencies():
    pyinstaller --onefile \
        --hidden-import PyQt5.QtCore \
        --hidden-import anitopy \
        --hidden-import tmdbsimple \
        --collect-all PyQt5 \
        main.py
```

## 관련 룰 참조

- **에러 처리**: [error_handling.mdc](mdc:.cursor/rules/error_handling.mdc)
- **로깅**: [logging.mdc](mdc:.cursor/rules/logging.mdc)
- **성능**: [performance.mdc](mdc:.cursor/rules/performance.mdc)
