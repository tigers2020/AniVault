[project]
name = "anivault"
version = "0.1.0"
description = "AniVault CLI - Anime file organization tool with TMDB integration"
requires-python = ">=3.9"
authors = [
    {name = "AniVault Team", email = "team@anivault.dev"}
]
readme = "README.md"
license = {text = "MIT"}

dependencies = [
    "click>=8.1.7",
    "tmdbv3api==1.9.0",
    "anitopy>=2.1.1",
    "rich>=14.1.0",
    "cryptography>=41.0.0",
    "parse>=1.20.0",
    "requests>=2.32.0",
    "requests-cache>=1.1.0",
    "tomli>=2.0.0; python_version < '3.11'",
    "tomli-w>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-httpx>=0.30.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.88.0",
    "memory-profiler>=0.61.0",
    "ruff>=0.6.0",
    "mypy>=1.10.0",
    "pre-commit>=3.7.0",
    "pyinstaller==6.16.0",
]

[project.scripts]
anivault = "anivault.cli.main:cli"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
# Black과 충돌 방지: E501 (line too long) 끄기
select = ["E", "F", "W", "C90", "I", "N", "UP", "YTT", "S", "BLE", "FBT", "B", "A", "COM", "C4", "DTZ", "T10", "DJ", "EM", "EXE", "FA", "ISC", "ICN", "G", "INP", "PIE", "T20", "PYI", "PT", "Q", "RSE", "RET", "SLF", "SLOT", "SIM", "TID", "TCH", "INT", "ARG", "PTH", "TD", "FIX", "ERA", "PD", "PGH", "PL", "TRY", "FLY", "NPY", "AIR", "PERF", "FURB", "LOG", "RUF"]
ignore = [
    "S101", "T201", "PLR0913", "PLR0912", "PLR0915",
    "C901",  # Function too complex
    "TRY300",  # Consider moving statement to else block
    "TRY301",  # Abstract raise to inner function
    "TRY003",  # Avoid specifying long messages outside the exception class
    "BLE001",  # Do not catch blind exception
    "SLF001",  # Private member accessed
    "PLW0603",  # Using global statement
    "PERF203",  # try-except within loop
    "S110",  # try-except-pass detected
    "ARG001",  # Unused function argument
    "E501",  # Line too long (Black이 처리)
    "DTZ007",  # Naive datetime
    "S602",  # subprocess call with shell=True (needed for dev scripts)
    "SIM105",  # Use contextlib.suppress
    "EM101",  # Exception must not use a string literal
    "TCH001",  # Move application import into type-checking block
    "TCH003",  # Move standard library import into type-checking block
    "RET504",  # Unnecessary assignment before return
    "INP001",  # Implicit namespace package (for scripts/)
    "PLR2004",  # Magic value used in comparison
]
exclude = [
    "tests/",
    "test_*.py",
    "**/test_*.py",
    "**/tests/",
    "tools/",
    "bench/",
    "build/",
    "dist/",
    "cache/",
    "htmlcov/",
    "logs/",
    "test_data_*/",
    "test_output/",
    "test_files/",
    "test_new_features.py"
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.black]
line-length = 88
target-version = ["py39"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "memory_intensive: marks tests that require significant memory resources",
    "benchmark: marks tests as benchmark/performance tests",
]
pythonpath = ["src"]

[tool.anivault.config]
log_file = "logs/anivault.log"
log_level = "INFO"
log_max_bytes = 10485760  # 10MB
log_backup_count = 5
media_extensions = [".mkv", ".mp4", ".avi", ".mov", ".wmv", ".flv", ".m4v", ".webm"]
