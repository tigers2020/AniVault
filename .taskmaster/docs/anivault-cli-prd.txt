# AniVault v3 CLI - Product Requirements Document

## Project Overview
AniVault v3 CLI is a Windows single executable (.exe) application for anime file organization using TMDB API. The application follows a CLI→API→GUI principle, with this PRD focusing exclusively on the CLI implementation.

## Core Requirements

### 1. Single Executable File
- **Primary Goal**: Windows single executable (.exe) 1 file
- **Target**: Windows 10/11 compatibility
- **Packaging**: PyInstaller --onefile --console (primary), Nuitka (fallback)
- **Dependencies**: No external installation required

### 2. TMDB Rate Limiting Compliance
- **Rate Limit**: ~50 rps community observed limit (safe margin: 35 rps default)
- **429 Handling**: Respect Retry-After header priority
- **State Machine**: Normal ↔ Throttle ↔ CacheOnly ↔ SleepThenResume
- **Token Bucket**: Default 35 rps with configurable options

### 3. JSON Cache System
- **Storage**: UTF-8 JSON files in cache/ directory
- **Schema**: Versioned cache objects with TTL
- **Keys**: Normalized queries (q_norm) with locale and year hints
- **Index**: cache/index.jsonl for query tracking
- **Recovery**: Automatic quarantine for corrupted files

### 4. File Processing Pipeline
- **Threading**: ScanParsePool → MatchOrganizePool (ThreadPoolExecutor)
- **Parsing**: anitopy (primary) + parse (fallback)
- **Queue**: Bounded queues with backpressure handling
- **Resume**: Checkpoint-based restart with deterministic IDs

### 5. CLI Commands
- **run**: Complete scan→parse→match→organize workflow
- **scan**: File enumeration with filters and concurrency
- **match**: Cache-first TMDB search and detail retrieval
- **organize**: Naming schema application (default dry-run)
- **cache**: Query/delete/warmup/hit rate statistics
- **settings**: TMDB key configuration and parameter management
- **status**: Last operation snapshot and metrics

### 6. Safety & Reliability
- **Dry Run Default**: All destructive operations require --apply flag
- **Rollback**: Complete rollback logs for file operations
- **Resume**: Idempotent restart without duplicate processing
- **Error Handling**: Comprehensive error codes and recovery

### 7. Performance Targets
- **Scan Throughput**: P95 ≥ 120k paths/minute (target), 60k paths/minute (minimum)
- **Memory Usage**: ≤500MB for 300k files (target), ≤600MB (minimum)
- **Parsing Failure**: ≤3%
- **TMDB Matching**: @1 ≥90%, @3 ≥96%
- **Cache Hit Rate**: ≥90% on second run

### 8. Windows Compatibility
- **Long Path**: Automatic \\?\ prefix for paths >260 characters
- **Reserved Names**: CON/PRN/AUX/NUL handling with substitution
- **UNC/Network**: Detection and performance warnings
- **UAC**: No administrator privileges required

### 9. Logging & Monitoring
- **UTF-8 Global**: All I/O operations use UTF-8 encoding
- **File Rotation**: TimedRotatingFileHandler (daily) with size limits
- **Log Levels**: app.log, network.log, pipeline.log separation
- **Machine Readable**: NDJSON format for structured logging
- **Security**: Sensitive information masking (API keys, paths)

### 10. Security & Compliance
- **API Key Encryption**: Fernet symmetric encryption with PIN
- **Configuration**: Environment variables → anivault.toml → user config
- **Secrets Scanning**: gitleaks/trufflehog integration
- **License Compliance**: Third-party license tracking
- **SBOM**: CycloneDX software bill of materials

## Technical Architecture

### Core Libraries
- **CLI Framework**: Click 8.1.0
- **TMDB Client**: tmdbv3api 1.9.0 (primary), httpx 0.25.0 (fallback)
- **File Parsing**: anitopy 2.1.1 (primary), parse 1.20.0 (fallback)
- **UI**: rich 14.1.0 for progress bars and formatting
- **Security**: cryptography 41.0.0 for API key encryption
- **Packaging**: PyInstaller 6.16.0 (primary), Nuitka 1.8.4 (fallback)

### Module Structure
- **core/**: Scan, parse, match, organize pipeline
- **services/**: TMDB client, cache/keyring, configuration
- **cli/**: Click-based command structure
- **utils/**: Logging, rate limiting, state machine, common DTOs

### Data Flow
1. **Scan**: Recursive directory traversal with file metadata
2. **Parse**: Anime filename parsing with anitopy + fallback
3. **Match**: TMDB API search with cache-first strategy
4. **Organize**: File renaming and organization with conflict resolution

## Quality Assurance

### Testing Requirements
- **Unit Tests**: 100% coverage for core business logic
- **Integration Tests**: Component interaction and TMDB API scenarios
- **E2E Tests**: Complete workflow validation
- **Performance Tests**: Benchmark scripts for throughput and memory
- **Stress Tests**: 300k+ files, 3+ hour execution, memory leak detection
- **Fuzzing**: File name edge cases (emojis, Unicode, RTL, long paths)

### Code Quality
- **Linting**: Ruff (replaces Black)
- **Type Checking**: mypy
- **Formatting**: Ruff formatting
- **Pre-commit**: Automated quality gates

### Contract Compliance
- **CLI Contract**: Fixed command options and output format
- **JSON Schema**: Validated NDJSON output format
- **Error Codes**: Standardized exit codes
- **Machine Readable**: Consistent JSON Lines format

## Development Phases

### Phase 1: Foundation (W1-W12)
- Project setup and quality gates
- Single exe POC with PyInstaller
- Core pipeline implementation
- TMDB client with rate limiting
- Basic caching system

### Phase 2: Core Features (W13-W24)
- Complete CLI command implementation
- Organize functionality with dry-run safety
- Configuration and security features
- Performance optimization
- Integration testing

### Phase 3: Stabilization (W25-W36)
- User testing and feedback
- Advanced features and optimization
- Documentation and tutorials
- Final testing and quality assurance
- Release preparation

## Success Criteria
- Single executable runs on clean Windows 10/11
- All performance targets met
- Comprehensive test coverage
- User satisfaction ≥80%
- Zero critical security vulnerabilities
- Complete documentation and tutorials
