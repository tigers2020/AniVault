# AniVault v3 CLI - CLI Commands PRD

## Overview
Implement complete CLI command set with standardized options, machine-readable output, and real-time progress indicators. This includes all core commands (run, scan, match, organize, cache, settings, status) with consistent UX.

## Goals
- Implement all core CLI commands with consistent interface
- Standardize common options across all commands
- Implement machine-readable JSON output format
- Add real-time progress indicators and statistics
- Ensure E2E workflow completion in one line

## Success Criteria
- `run` command completes E2E in one line
- Progress bars and statistics update correctly
- All commands implement common options consistently
- JSON output format validated against schema
- Machine-readable output working correctly

## Technical Requirements

### Core Commands Implementation
- **`run`**: Complete scan→parse→match→organize workflow
- **`scan`**: File enumeration with filters and concurrency
- **`match`**: Cache-first TMDB search and detail retrieval
- **`organize`**: Naming schema application (default dry-run)
- **`cache`**: Query/delete/warmup/hit rate statistics
- **`settings`**: TMDB key configuration and parameter management
- **`status`**: Last operation snapshot and metrics

### Common Options Standardization
- **`--lang`**: Language preference (e.g., ko-KR, ja-JP, en-US)
- **`--max-workers`**: Thread pool size configuration
- **`--tmdb-concurrency`**: TMDB API concurrency limit
- **`--rate`**: Token bucket rate (requests per second)
- **`--dry-run`**: Preview mode without actual changes
- **`--resume`**: Resume from last checkpoint
- **`--log-level`**: Logging verbosity control
- **`--no-color`**: Disable colored output
- **`--json`**: Machine-readable JSON output

### Machine-Readable Output
- **NDJSON format**: Newline-delimited JSON for streaming
- **Structured logging**: Standardized log keys and values
- **Progress events**: Real-time progress updates
- **Statistics output**: Performance metrics and results
- **Error reporting**: Standardized error codes and messages

## Deliverables
- [ ] **Core commands implementation:**
  - [ ] `run`: Complete scan→parse→match→organize workflow
  - [ ] `scan`: File enumeration with filters and concurrency
  - [ ] `match`: Cache-first TMDB search and detail retrieval
  - [ ] `organize`: Naming schema application (default dry-run)
  - [ ] `cache`: Query/delete/warmup/hit rate statistics
  - [ ] `settings`: TMDB key configuration and parameter management
  - [ ] `status`: Last operation snapshot and metrics
- [ ] **Common options standardization:**
  - [ ] `--lang`, `--max-workers`, `--tmdb-concurrency`, `--rate`
  - [ ] `--dry-run`, `--resume`, `--log-level`, `--no-color`, `--json`
- [ ] **Machine-readable output:**
  - [ ] NDJSON format for structured logging
  - [ ] Real-time progress indicators
  - [ ] Statistics and metrics output

## Definition of Done
- [ ] `run` command completes E2E in one line
- [ ] Progress bars and statistics update correctly
- [ ] All commands implement common options consistently
- [ ] JSON output format validated against schema
- [ ] Machine-readable output working correctly
- [ ] Error handling standardized across commands

## Command Specifications

### `run` Command
```bash
anivault.exe run --src D:\Anime --dst E:\Vault --lang ko-KR --rate 35 --tmdb-concurrency 4
```
- **Purpose**: Complete workflow execution
- **Options**: All common options supported
- **Output**: Real-time progress + final statistics
- **Safety**: Default dry-run mode

### `scan` Command
```bash
anivault.exe scan --src D:\Anime --extensions .mkv,.mp4,.avi --max-workers 8
```
- **Purpose**: File enumeration and filtering
- **Options**: Source path, extensions, concurrency
- **Output**: File list with metadata
- **Performance**: Optimized for large directories

### `match` Command
```bash
anivault.exe match --src D:\Anime --lang ja-JP --tmdb-concurrency 4
```
- **Purpose**: TMDB API matching
- **Options**: Language, concurrency, rate limiting
- **Output**: Match results with confidence scores
- **Cache**: Cache-first approach

### `organize` Command
```bash
anivault.exe organize --src D:\Anime --dst E:\Vault --plan out\plan.json --apply
```
- **Purpose**: File organization with safety
- **Options**: Source, destination, plan file, apply flag
- **Safety**: Default dry-run, requires --apply for changes
- **Output**: Organization plan and results

### `cache` Command
```bash
anivault.exe cache stats
anivault.exe cache purge --older-than 30d
```
- **Purpose**: Cache management and statistics
- **Options**: Stats, purge, warmup, query
- **Output**: Cache metrics and management results

### `settings` Command
```bash
anivault.exe settings set --tmdb-key %TMDB_KEY%
anivault.exe settings show
```
- **Purpose**: Configuration management
- **Options**: Set, show, reset configuration
- **Security**: Encrypted key storage
- **Output**: Configuration status

### `status` Command
```bash
anivault.exe status
```
- **Purpose**: Last operation status and metrics
- **Options**: Detailed metrics, performance stats
- **Output**: Operation summary and statistics

## Machine-Readable Output Format
```json
{"phase": "scan", "event": "progress", "ts": "2025-01-27T16:00:00Z", "fields": {"files_found": 12483, "progress": 75}}
{"phase": "match", "event": "cache_hit", "ts": "2025-01-27T16:00:00Z", "fields": {"query": "attack on titan", "hit": true}}
{"phase": "organize", "event": "dry_run", "ts": "2025-01-27T16:00:00Z", "fields": {"files_processed": 11902, "changes": 0}}
```

## Progress Indicators
- **Real-time statistics**: Files processed, cache hits, errors
- **Progress bars**: Visual progress indication
- **Performance metrics**: Throughput, memory usage, time estimates
- **Error reporting**: Immediate error feedback
- **Status updates**: Current phase and progress

## Error Handling
- **Standardized error codes**: E-TMDB-429, E-FS-PERM, E-CACHE-CORRUPT
- **Error classification**: Network, filesystem, parsing, API errors
- **Recovery suggestions**: Automatic retry, fallback options
- **Logging integration**: Structured error logging

## Testing Requirements
- **E2E testing**: Complete workflow validation
- **Command testing**: Individual command functionality
- **Option testing**: All common options across commands
- **Output testing**: JSON format validation
- **Error testing**: Error handling and recovery

## Risk Mitigation
- **Command consistency**: Standardized option handling
- **Output reliability**: Structured logging and error handling
- **Performance**: Real-time progress without overhead
- **User experience**: Clear feedback and error messages
- **Safety**: Dry-run defaults and confirmation prompts

## Timeline
**Weeks 15-16**: CLI commands implementation
**Priority**: HIGH - Complete CLI command implementation

## Dependencies
- Requires completion of Phase 1 tags (1-5)
- File processing pipeline established
- TMDB API integration completed
- Cache system operational
- Rate limiting implemented
