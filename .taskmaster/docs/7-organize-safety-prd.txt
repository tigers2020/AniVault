# AniVault v3 CLI - Organize Safety PRD

## Overview
Implement file organization with comprehensive safety features, including dry-run defaults, rollback system, conflict resolution, and multi-language naming support. This ensures safe file operations with complete recovery capabilities.

## Goals
- Implement naming schema v1 with multi-language support
- Create comprehensive conflict resolution rules
- Implement complete rollback system for file operations
- Ensure safety defaults with dry-run mode
- Support plan file generation for user review

## Success Criteria
- Dry-run shows 0 actual changes
- Rollback script generation and verification
- File collision handling tested
- Multi-language naming working correctly
- Plan file generation and execution working

## Technical Requirements

### Naming Schema v1
- **Pattern**: `{title_ascii_or_native} ({year}) S{season:02d}{episode_token}.{ext}`
- **Multi-episode**: `E{ep_start:02d}-E{ep_end:02d}`
- **Special episodes**: `Season 00` fixed
- **Multi-language processing**: `--lang` → TMDB translations → English fallback
- **Character handling**: Reserved names and forbidden characters

### Conflict Resolution Rules
- **File collision detection**: Duplicate filename handling
- **User confirmation**: Overwrite confirmation prompts
- **Skip options**: Problematic file handling
- **Hash-based naming**: Collision avoidance with hash suffixes
- **Path length handling**: Windows 260-character limit compliance

### Rollback System
- **Complete rollback logs**: All file operations tracked
- **Path tracking**: Before/after paths, timestamps, hashes
- **Partial failure recovery**: Last success point restoration
- **Rollback script generation**: Automated recovery scripts
- **Verification**: Rollback integrity checking

### Safety Defaults
- **Default dry-run mode**: No actual changes without explicit flag
- **`--apply` flag requirement**: Explicit confirmation for changes
- **Plan file generation**: User review before execution
- **Confirmation prompts**: Critical operation confirmations
- **Progress tracking**: Real-time operation monitoring

## Deliverables
- [ ] **Naming schema v1:**
  - [ ] Pattern: `{title_ascii_or_native} ({year}) S{season:02d}{episode_token}.{ext}`
  - [ ] Multi-episode: `E{ep_start:02d}-E{ep_end:02d}`
  - [ ] Special episodes: `Season 00` fixed
  - [ ] Multi-language processing: `--lang` → TMDB translations → English fallback
- [ ] **Conflict resolution rules:**
  - [ ] File collision detection and handling
  - [ ] User confirmation for overwrites
  - [ ] Skip options for problematic files
- [ ] **Rollback system:**
  - [ ] Complete rollback logs for all file operations
  - [ ] Path before/after, timestamp, hash tracking
  - [ ] Partial failure recovery to last success point
  - [ ] Rollback script generation and validation
- [ ] **Safety defaults:**
  - [ ] Default dry-run mode (no actual changes)
  - [ ] `--apply` flag required for real changes
  - [ ] Plan file generation for user review

## Definition of Done
- [ ] Dry-run shows 0 actual changes
- [ ] Rollback script generation and verification
- [ ] File collision handling tested
- [ ] Multi-language naming working correctly
- [ ] Plan file generation and execution working
- [ ] Safety defaults enforced
- [ ] Conflict resolution tested

## Naming Schema Implementation

### Basic Pattern
```
{title_ascii_or_native} ({year}) S{season:02d}{episode_token}.{ext}
```

### Examples
- **Single episode**: `Attack on Titan (2013) S01E01.mkv`
- **Multi-episode**: `Attack on Titan (2013) S01E01-E03.mkv`
- **Special episode**: `Attack on Titan (2013) S00E01.mkv`
- **Multi-language**: `進撃の巨人 (2013) S01E01.mkv` (Japanese)

### Character Handling
- **Reserved names**: CON, PRN, AUX, NUL → `_CON`, `_PRN`, etc.
- **Forbidden characters**: `< > : " | ? *` → `_` replacement
- **Hash suffixes**: Collision avoidance with hash tails
- **Path length**: Windows 260-character limit compliance

## Conflict Resolution Strategy

### File Collision Detection
1. **Duplicate filename detection**: Check destination for existing files
2. **Hash comparison**: Compare file contents for duplicates
3. **Metadata comparison**: Check file size, modification time
4. **User notification**: Clear conflict reporting
5. **Resolution options**: Overwrite, skip, rename, abort

### Resolution Options
- **Overwrite**: Replace existing file (with confirmation)
- **Skip**: Leave existing file unchanged
- **Rename**: Generate unique filename
- **Abort**: Stop operation on first conflict
- **Interactive**: Prompt user for each conflict

## Rollback System Design

### Operation Logging
```json
{
  "operation_id": "uuid-here",
  "timestamp": "2025-01-27T16:00:00Z",
  "operation": "move",
  "source": "D:\\Anime\\file.mkv",
  "destination": "E:\\Vault\\Attack on Titan (2013) S01E01.mkv",
  "file_hash": "sha256-hash",
  "file_size": 1234567890,
  "status": "success"
}
```

### Rollback Script Generation
```bash
# Rollback script for operation uuid-here
# Generated: 2025-01-27T16:00:00Z

# Move file back to original location
move "E:\Vault\Attack on Titan (2013) S01E01.mkv" "D:\Anime\file.mkv"

# Verify file integrity
# sha256sum verification here
```

### Partial Failure Recovery
1. **Checkpoint system**: Save progress at regular intervals
2. **Operation tracking**: Track successful vs failed operations
3. **Recovery point**: Identify last successful operation
4. **Selective rollback**: Rollback only failed operations
5. **Resume capability**: Continue from last checkpoint

## Plan File System

### Plan File Generation
```bash
anivault.exe organize --src D:\Anime --dst E:\Vault --plan out\plan.json
```

### Plan File Structure
```json
{
  "plan_id": "uuid-here",
  "created_at": "2025-01-27T16:00:00Z",
  "source": "D:\\Anime",
  "destination": "E:\\Vault",
  "operations": [
    {
      "source": "D:\\Anime\\file.mkv",
      "destination": "E:\\Vault\\Attack on Titan (2013) S01E01.mkv",
      "operation": "move",
      "conflicts": []
    }
  ],
  "summary": {
    "total_files": 1000,
    "conflicts": 0,
    "estimated_time": "5 minutes"
  }
}
```

### Plan File Execution
```bash
anivault.exe organize --from-plan out\plan.json --apply
```

## Safety Features

### Dry-Run Mode
- **Default behavior**: All operations in preview mode
- **No file changes**: Read-only operations
- **Full simulation**: Complete operation simulation
- **Statistics**: Detailed operation statistics
- **Confirmation**: User review before execution

### Confirmation Prompts
- **Critical operations**: File moves, deletions, overwrites
- **Batch operations**: Large-scale changes
- **Destructive operations**: Irreversible changes
- **User input**: Clear yes/no prompts
- **Abort option**: Cancel operation at any time

## Testing Requirements
- **Dry-run testing**: No actual changes in dry-run mode
- **Rollback testing**: Complete operation rollback
- **Conflict testing**: Various collision scenarios
- **Plan file testing**: Generation and execution
- **Safety testing**: Confirmation prompts and abort options

## Risk Mitigation
- **Data loss prevention**: Dry-run defaults and confirmations
- **Operation tracking**: Complete audit trail
- **Recovery capability**: Rollback system
- **User control**: Plan file review and approval
- **Error handling**: Graceful failure recovery

## Timeline
**Weeks 13-14**: Organize safety implementation
**Priority**: HIGH - File organization with safety features

## Dependencies
- Requires completion of Phase 1 tags (1-5)
- File processing pipeline established
- TMDB API integration completed
- Cache system operational
- Rate limiting implemented
