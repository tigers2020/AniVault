# AniVault v3 CLI - Documentation PRD

## Overview
Create comprehensive documentation suite including user documentation, API documentation, developer documentation, and tutorials. This ensures complete knowledge transfer and user adoption.

## Goals
- Create comprehensive user documentation
- Generate complete API documentation
- Develop developer documentation
- Create tutorials and examples
- Ensure documentation quality and completeness

## Success Criteria
- Complete documentation suite
- User guide completed
- API documentation up to date
- Tutorials tested and verified
- Developer guide comprehensive

## Technical Requirements

### User Documentation
- **User manual**: Step-by-step guides for all features
- **Command reference**: Complete command documentation with examples
- **Configuration guide**: Settings and configuration options
- **Troubleshooting section**: Common issues and solutions
- **FAQ**: Frequently asked questions and answers

### API Documentation
- **Internal API**: Core module documentation
- **JSON schema**: Schema documentation and validation
- **Error codes**: Complete error code reference
- **Configuration schema**: Configuration file documentation
- **Data structures**: Internal data structure documentation

### Developer Documentation
- **Architecture overview**: System design and components
- **Development setup**: Environment setup and requirements
- **Contributing guidelines**: Contribution process and standards
- **Testing procedures**: Testing framework and procedures
- **Build process**: Build and packaging documentation

### Tutorials and Examples
- **Getting started**: Basic usage tutorial
- **Advanced usage**: Complex scenarios and examples
- **Performance tuning**: Optimization guide
- **Windows setup**: Windows-specific setup guide
- **Integration examples**: Third-party integration examples

## Deliverables
- [ ] **User documentation:**
  - [ ] User manual with step-by-step guides
  - [ ] Command reference with examples
  - [ ] Configuration guide
  - [ ] Troubleshooting section
  - [ ] FAQ
- [ ] **API documentation:**
  - [ ] Internal API documentation
  - [ ] JSON schema documentation
  - [ ] Error code reference
  - [ ] Configuration file schema
  - [ ] Data structures documentation
- [ ] **Developer documentation:**
  - [ ] Architecture overview
  - [ ] Development setup guide
  - [ ] Contributing guidelines
  - [ ] Testing procedures
  - [ ] Build process documentation
- [ ] **Tutorials and examples:**
  - [ ] Getting started tutorial
  - [ ] Advanced usage examples
  - [ ] Performance tuning guide
  - [ ] Windows-specific setup guide
  - [ ] Integration examples

## Definition of Done
- [ ] Complete documentation suite
- [ ] User guide completed
- [ ] API documentation up to date
- [ ] Tutorials tested and verified
- [ ] Developer guide comprehensive
- [ ] Documentation quality reviewed
- [ ] All examples working

## User Documentation Implementation

### User Manual Structure
```markdown
# AniVault v3 CLI User Manual

## Table of Contents
1. Introduction
2. Installation
3. Quick Start
4. Configuration
5. Commands Reference
6. Advanced Usage
7. Troubleshooting
8. FAQ

## 1. Introduction
### What is AniVault?
AniVault is a command-line tool for organizing anime files using TMDB (The Movie Database) metadata.

### Key Features
- Single executable file
- TMDB API integration
- Intelligent file matching
- Safe file organization
- Multi-language support
- Performance optimized

## 2. Installation
### System Requirements
- Windows 10/11
- No additional dependencies required

### Download and Setup
1. Download `anivault.exe` from releases
2. Place in desired directory
3. Run `anivault.exe --help` to verify installation

## 3. Quick Start
### First Run
```bash
# Set up TMDB API key
anivault.exe settings set --tmdb-key YOUR_API_KEY

# Run in dry-run mode to preview changes
anivault.exe run --src "D:\Anime" --dst "E:\Organized" --dry-run

# Apply changes (remove --dry-run)
anivault.exe run --src "D:\Anime" --dst "E:\Organized"
```

### Basic Workflow
1. **Scan**: Discover anime files
2. **Match**: Find TMDB metadata
3. **Organize**: Rename and move files
4. **Verify**: Check results

## 4. Configuration
### Configuration File
Location: `%APPDATA%\AniVault\config.toml`

```toml
[tmdb]
api_key = "your_encrypted_key"
base_url = "https://api.themoviedb.org/3"

[rate_limiting]
requests_per_second = 35
burst_size = 50

[cache]
max_size_mb = 512
ttl_seconds = 2592000

[logging]
level = "INFO"
file_rotation = true
```

### Environment Variables
- `ANIVAULT_TMDB_KEY`: TMDB API key
- `ANIVAULT_LOG_LEVEL`: Logging level
- `ANIVAULT_CACHE_DIR`: Cache directory

## 5. Commands Reference
### Core Commands
- `run`: Complete workflow
- `scan`: File discovery
- `match`: Metadata matching
- `organize`: File organization
- `cache`: Cache management
- `settings`: Configuration
- `status`: System status

### Common Options
- `--src`: Source directory
- `--dst`: Destination directory
- `--lang`: Language preference
- `--dry-run`: Preview mode
- `--json`: Machine-readable output

## 6. Advanced Usage
### Batch Processing
```bash
# Process multiple directories
anivault.exe run --src "D:\Anime1" --dst "E:\Organized"
anivault.exe run --src "D:\Anime2" --dst "E:\Organized"
```

### Performance Tuning
```bash
# Adjust worker count
anivault.exe run --max-workers 16 --src "D:\Anime" --dst "E:\Organized"

# Adjust rate limiting
anivault.exe run --rate 50 --src "D:\Anime" --dst "E:\Organized"
```

### Plan Files
```bash
# Generate plan file
anivault.exe organize --src "D:\Anime" --dst "E:\Organized" --plan plan.json

# Review plan file
# Edit plan.json if needed

# Execute plan
anivault.exe organize --from-plan plan.json --apply
```

## 7. Troubleshooting
### Common Issues
1. **TMDB API errors**: Check API key and rate limits
2. **File permission errors**: Check file system permissions
3. **Memory usage**: Adjust worker count and cache size
4. **Network issues**: Check internet connection and firewall

### Error Codes
- `E-TMDB-429`: Rate limit exceeded
- `E-FS-PERM`: File system permission error
- `E-CACHE-CORRUPT`: Cache corruption
- `E-PARSE-FAIL`: File parsing error

### Debug Mode
```bash
# Enable debug logging
anivault.exe run --log-level DEBUG --src "D:\Anime" --dst "E:\Organized"
```

## 8. FAQ
### Q: How do I get a TMDB API key?
A: Visit https://www.themoviedb.org/settings/api and create an account.

### Q: Can I use AniVault on Linux/Mac?
A: Currently, AniVault is Windows-only. Linux/Mac support is planned for future versions.

### Q: How do I recover from a failed operation?
A: Use the rollback logs in the `logs/` directory to restore files.

### Q: Can I customize the naming scheme?
A: Yes, use the `--naming-scheme` option or modify the configuration file.
```

## API Documentation Implementation

### Internal API Documentation
```python
"""
AniVault v3 CLI - Internal API Documentation

This module provides the core API for AniVault functionality.
"""

class FileProcessor:
    """
    Core file processing functionality.
    
    This class handles file scanning, parsing, and metadata extraction.
    """
    
    def __init__(self, config: Config):
        """
        Initialize file processor.
        
        Args:
            config: Configuration object
        """
        self.config = config
        self.parser = FilenameParser()
        self.cache = CacheManager()
    
    def process_file(self, file_path: Path) -> ProcessResult:
        """
        Process a single file.
        
        Args:
            file_path: Path to file to process
            
        Returns:
            ProcessResult: Processing result with metadata
            
        Raises:
            FileNotFoundError: If file doesn't exist
            PermissionError: If file access is denied
        """
        pass
    
    def scan_directory(self, directory: Path) -> Iterator[Path]:
        """
        Scan directory for anime files.
        
        Args:
            directory: Directory to scan
            
        Yields:
            Path: Path to each anime file found
        """
        pass

class TMDBClient:
    """
    TMDB API client with rate limiting.
    
    This class handles all TMDB API interactions with built-in rate limiting.
    """
    
    def __init__(self, api_key: str, rate_limit: int = 35):
        """
        Initialize TMDB client.
        
        Args:
            api_key: TMDB API key
            rate_limit: Requests per second limit
        """
        self.api_key = api_key
        self.rate_limiter = RateLimiter(rate_limit)
    
    def search_tv(self, query: str, language: str = 'en-US') -> List[TVShow]:
        """
        Search for TV shows.
        
        Args:
            query: Search query
            language: Language code (e.g., 'en-US', 'ja-JP')
            
        Returns:
            List[TVShow]: List of matching TV shows
            
        Raises:
            RateLimitError: If rate limit exceeded
            APIError: If API request fails
        """
        pass
    
    def get_tv_details(self, tv_id: int, language: str = 'en-US') -> TVShowDetails:
        """
        Get TV show details.
        
        Args:
            tv_id: TMDB TV show ID
            language: Language code
            
        Returns:
            TVShowDetails: TV show details
            
        Raises:
            NotFoundError: If TV show not found
            APIError: If API request fails
        """
        pass
```

### JSON Schema Documentation
```json
{
  "title": "AniVault CLI Event Schema",
  "description": "Schema for CLI event logging",
  "type": "object",
  "properties": {
    "timestamp": {
      "type": "string",
      "format": "date-time",
      "description": "UTC timestamp in ISO8601 format"
    },
    "component": {
      "type": "string",
      "description": "Component that generated the event",
      "enum": ["ratelimiter", "cache", "pipeline", "tmdb"]
    },
    "level": {
      "type": "string",
      "description": "Log level",
      "enum": ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"]
    },
    "event": {
      "type": "string",
      "description": "Event type"
    },
    "fields": {
      "type": "object",
      "description": "Event-specific fields"
    }
  },
  "required": ["timestamp", "component", "level", "event"]
}
```

## Developer Documentation Implementation

### Architecture Overview
```markdown
# AniVault v3 CLI - Architecture Overview

## System Architecture

```
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   CLI Layer     │    │  Service Layer  │    │   Core Layer    │
│                 │    │                 │    │                 │
│ • Click Commands│◄──►│ • TMDB Client   │◄──►│ • File Processor│
│ • User Interface│    │ • Cache Manager │    │ • Parser        │
│ • Progress UI   │    │ • Rate Limiter  │    │ • Organizer     │
└─────────────────┘    └─────────────────┘    └─────────────────┘
```

## Component Responsibilities

### CLI Layer
- **Click Commands**: Command-line interface
- **User Interface**: Progress bars, output formatting
- **Input Validation**: Parameter validation and sanitization

### Service Layer
- **TMDB Client**: API integration with rate limiting
- **Cache Manager**: JSON cache with TTL and LRU
- **Rate Limiter**: Token bucket algorithm
- **Configuration**: Settings management

### Core Layer
- **File Processor**: File scanning and processing
- **Parser**: Filename parsing with anitopy
- **Organizer**: File organization and naming
- **Utilities**: Common utilities and helpers

## Data Flow

1. **Scan Phase**: Discover files in source directory
2. **Parse Phase**: Extract metadata from filenames
3. **Match Phase**: Find TMDB metadata for files
4. **Organize Phase**: Rename and move files to destination

## Threading Model

- **ScanParsePool**: ThreadPoolExecutor for file processing
- **MatchOrganizePool**: ThreadPoolExecutor for organization
- **Bounded Queues**: Backpressure handling between phases
- **Rate Limiting**: Semaphore-based TMDB API concurrency control
```

### Development Setup
```markdown
# Development Setup Guide

## Prerequisites
- Python 3.9+
- Git
- Windows 10/11

## Environment Setup
```bash
# Clone repository
git clone https://github.com/your-org/anivault.git
cd anivault

# Create virtual environment
python -m venv venv
venv\Scripts\activate

# Install dependencies
pip install -r requirements.txt
pip install -r requirements-dev.txt

# Install pre-commit hooks
pre-commit install
```

## Development Workflow
1. **Create feature branch**: `git checkout -b feature/your-feature`
2. **Make changes**: Implement your feature
3. **Run tests**: `pytest`
4. **Check code quality**: `ruff check . && mypy .`
5. **Commit changes**: `git commit -m "feat: your feature"`
6. **Push branch**: `git push origin feature/your-feature`
7. **Create PR**: Submit pull request

## Testing
```bash
# Run all tests
pytest

# Run with coverage
pytest --cov=src

# Run specific test
pytest tests/test_file_processor.py

# Run stress tests
pytest tests/stress/ -v
```

## Building
```bash
# Build with PyInstaller
python build.py

# Build with Nuitka
python nuitka_config.py

# Test executable
dist\anivault.exe --help
```
```

## Tutorials and Examples Implementation

### Getting Started Tutorial
```markdown
# Getting Started with AniVault v3 CLI

## Step 1: Download and Setup
1. Download `anivault.exe` from the releases page
2. Place it in a directory (e.g., `C:\Tools\`)
3. Add the directory to your PATH environment variable

## Step 2: Get TMDB API Key
1. Visit https://www.themoviedb.org/settings/api
2. Create an account and request an API key
3. Copy your API key

## Step 3: Configure AniVault
```bash
# Set your TMDB API key
anivault.exe settings set --tmdb-key YOUR_API_KEY

# Verify configuration
anivault.exe settings show
```

## Step 4: First Run (Dry Run)
```bash
# Preview what AniVault will do
anivault.exe run --src "D:\Anime" --dst "E:\Organized" --dry-run
```

## Step 5: Apply Changes
```bash
# Remove --dry-run to actually organize files
anivault.exe run --src "D:\Anime" --dst "E:\Organized"
```

## Step 6: Verify Results
```bash
# Check the organized files
dir "E:\Organized"

# View status and statistics
anivault.exe status
```
```

### Advanced Usage Examples
```markdown
# Advanced Usage Examples

## Batch Processing
```bash
# Process multiple directories
anivault.exe run --src "D:\Anime1" --dst "E:\Organized"
anivault.exe run --src "D:\Anime2" --dst "E:\Organized"
anivault.exe run --src "D:\Anime3" --dst "E:\Organized"
```

## Performance Tuning
```bash
# Increase worker count for faster processing
anivault.exe run --max-workers 16 --src "D:\Anime" --dst "E:\Organized"

# Adjust rate limiting for TMDB API
anivault.exe run --rate 50 --src "D:\Anime" --dst "E:\Organized"

# Set TMDB concurrency limit
anivault.exe run --tmdb-concurrency 8 --src "D:\Anime" --dst "E:\Organized"
```

## Plan Files
```bash
# Generate plan file for review
anivault.exe organize --src "D:\Anime" --dst "E:\Organized" --plan plan.json

# Review plan.json file
# Edit if needed

# Execute plan
anivault.exe organize --from-plan plan.json --apply
```

## Multi-Language Support
```bash
# Use Japanese language
anivault.exe run --lang ja-JP --src "D:\Anime" --dst "E:\Organized"

# Use Korean language
anivault.exe run --lang ko-KR --src "D:\Anime" --dst "E:\Organized"
```

## Cache Management
```bash
# View cache statistics
anivault.exe cache stats

# Clear old cache entries
anivault.exe cache purge --older-than 30d

# Warm up cache
anivault.exe cache warmup --src "D:\Anime"
```
```

## Testing Requirements
- **Documentation testing**: All examples and tutorials tested
- **API documentation**: Internal API documentation verified
- **User guide**: Step-by-step guide validation
- **Developer guide**: Development setup verification
- **Tutorial testing**: All tutorials working correctly

## Risk Mitigation
- **Documentation accuracy**: Regular review and updates
- **Example validity**: All examples tested and working
- **User experience**: Clear and comprehensive guides
- **Developer experience**: Complete development documentation
- **Maintenance**: Documentation update procedures

## Timeline
**Weeks 31-32**: Documentation implementation
**Priority**: MEDIUM - Complete documentation and tutorials

## Dependencies
- Requires completion of all Phase 1, 2, and 3 tags (1-13)
- File processing pipeline established
- TMDB API integration completed
- Cache system operational
- Rate limiting implemented
- CLI commands implemented
- Organize safety features completed
- Windows compatibility implemented
- Performance optimization completed
- Testing quality implemented
- Security configuration completed
- Logging monitoring completed
- Packaging deployment completed
